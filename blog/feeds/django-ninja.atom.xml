<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Blog - Django-Ninja</title><link href="https://baseplate-admin.github.io/blog/" rel="alternate"></link><link href="https://baseplate-admin.github.io/blog/feeds/django-ninja.atom.xml" rel="self"></link><id>https://baseplate-admin.github.io/blog/</id><updated>2023-06-19T11:13:39+06:00</updated><entry><title>How to make a permission_required decorator for django-ninja</title><link href="https://baseplate-admin.github.io/blog/how-to-make-a-permission_required-decorator-for-django-ninja" rel="alternate"></link><published>2023-06-19T00:00:00+06:00</published><updated>2023-06-19T11:13:39+06:00</updated><author><name>Baseplate-Admin</name></author><id>tag:baseplate-admin.github.io,2023-06-19:/blog/how-to-make-a-permission_required-decorator-for-django-ninja</id><summary type="html">&lt;p&gt;It's no surprise that &lt;code&gt;django-ninja&lt;/code&gt; is the next big thing for &lt;code&gt;django&lt;/code&gt;. But as you might have assumed, &lt;code&gt;django-ninja&lt;/code&gt; is the new kid on the block. It lacks many of the necessary features of &lt;code&gt;django-rest-framework&lt;/code&gt; ( eg: &lt;strong&gt;&lt;code&gt;throttling&lt;/code&gt;&lt;/strong&gt;,&lt;strong&gt;&lt;code&gt;permission_required&lt;/code&gt;&lt;/strong&gt; ). Recreating all of that in one article is not a feasible thing â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's no surprise that &lt;code&gt;django-ninja&lt;/code&gt; is the next big thing for &lt;code&gt;django&lt;/code&gt;. But as you might have assumed, &lt;code&gt;django-ninja&lt;/code&gt; is the new kid on the block. It lacks many of the necessary features of &lt;code&gt;django-rest-framework&lt;/code&gt; ( eg: &lt;strong&gt;&lt;code&gt;throttling&lt;/code&gt;&lt;/strong&gt;,&lt;strong&gt;&lt;code&gt;permission_required&lt;/code&gt;&lt;/strong&gt; ). Recreating all of that in one article is not a feasible thing ( due to how complex the topic can get )&lt;/p&gt;
&lt;p&gt;This article tries to cover how to make a &lt;code&gt;permission_required&lt;/code&gt; decorator with &lt;code&gt;django-ninja&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This article assumes that developer is familiar with &lt;a href="https://docs.python.org/3/glossary.html#term-decorator"&gt;&lt;strong&gt;python decorators&lt;/strong&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now that the boring part is out of the equation, let's see how we can implement a &lt;code&gt;permission_required&lt;/code&gt; decorator.&lt;/p&gt;
&lt;h1 id="how-to-implement-a-permission_requied-decorator"&gt;How to implement a &lt;code&gt;permission_requied&lt;/code&gt; decorator&lt;a class="headerlink" href="#how-to-implement-a-permission_requied-decorator" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Let's make a file named &lt;code&gt;permissions.py&lt;/code&gt; ( this file will essentially have all of our permission classes )&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# permissions.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpRequest&lt;/span&gt;

&lt;span class="n"&gt;SAFE_METHODS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"GET"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"HEAD"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"OPTIONS"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IsSuperUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HttpRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;has_permissions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_superuser&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;SAFE_METHODS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;Let's make another file named &lt;code&gt;decorators.py&lt;/code&gt; ( this will essentially have our core logics )&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# decorator.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections.abc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wraps&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTTPStatus&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TYPE_CHECKING&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;apps.user.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CustomUser&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AnonymousUser&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpRequest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ninja.errors&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpError&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;TYPE_CHECKING&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.permissions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;IsSuperUser&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;permission_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;HttpRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CustomUser&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s2"&gt;"IsSuperUser"&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"auth"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# To get request.auth&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HttpRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AnonymousUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;permission_granted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;permission&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_permissions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;permission&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;permission_granted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;HttpError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;HTTPStatus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UNAUTHORIZED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s2"&gt;"Superuser is required for this operation"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;... and we are done.&lt;/p&gt;
&lt;h1 id="how-to-use-this-decorator"&gt;How to use this decorator&lt;a class="headerlink" href="#how-to-use-this-decorator" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Let's say you have a super protected route and you don't want every user to access that information ( it's okay to have different information for different users | We wont judge ).&lt;/p&gt;
&lt;p&gt;Let's assume you have a route that you want to protect :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/some-route'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;return_super_secret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'Hi, this is not meant to be accessible to normal users'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Essentially you can just add a decorator to protect the route.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ninja&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;NinjaAPI&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.permissions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;IsSuperUser&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.decorator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;permission_required&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.auth&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AuthBearer&lt;/span&gt;

&lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NinjaAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AuthBearer&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="nd"&gt;@permission_required&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;IsSuperUser&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;return_super_secret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'Hi, this is not meant to be accessible to normal users'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub&gt; If you aren't sure about where the &lt;code&gt;AuthBearer&lt;/code&gt; class came from have a look at &lt;a href="https://django-ninja.rest-framework.com/guides/authentication/#http-bearer"&gt;this&lt;/a&gt; &lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;You must note the following things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The decorator must come after the &lt;code&gt;@api.get&lt;/code&gt;&lt;/strong&gt;. Otherwise we wont have a request object that is injected with the &lt;code&gt;request.auth&lt;/code&gt; parameter that we need.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The &lt;code&gt;@api.get()&lt;/code&gt; decorator must have a &lt;code&gt;auth&lt;/code&gt; parameter&lt;/strong&gt;, Otherwise our method of getting the user from request object is not going to work.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and &lt;strong&gt;Voila!&lt;/strong&gt; you have a functional &lt;code&gt;permission_required&lt;/code&gt; decorator.&lt;/p&gt;
&lt;p&gt;Take it for a spin. Good luck on your journey.&lt;/p&gt;
&lt;h1 id="how-does-this-work"&gt;How does this work&lt;a class="headerlink" href="#how-does-this-work" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;This section is meant for advanced developers who atleast have a basic understanding of &lt;a href="https://en.wikipedia.org/wiki/Dependency_injection"&gt;&lt;code&gt;dependency-injection&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/vitalik/django-ninja/"&gt;&lt;code&gt;django-ninja&lt;/code&gt;&lt;/a&gt; architecture&lt;/strong&gt;&lt;/p&gt;</content><category term="Django-Ninja"></category><category term="django-ninja"></category></entry><entry><title>Why I chose django-ninja instead of django-rest-framework to build coreproject</title><link href="https://baseplate-admin.github.io/blog/why-i-chose-django-ninja-instead-of-django-rest-framework-to-build-coreproject.html" rel="alternate"></link><published>2023-06-17T00:00:00+06:00</published><updated>2023-06-19T10:46:47+06:00</updated><author><name>Baseplate-Admin</name></author><id>tag:baseplate-admin.github.io,2023-06-17:/blog/why-i-chose-django-ninja-instead-of-django-rest-framework-to-build-coreproject.html</id><summary type="html">&lt;p&gt;&lt;code&gt;django-ninja&lt;/code&gt; is a relatively new framework ( &lt;a href="https://github.com/vitalik/django-ninja/commit/1b79e8de644aef247e0456daa3b566db70fe1c07"&gt;first commit was in July 21, 2020&lt;/a&gt; ). So you might ask why would you use it instead of something like &lt;code&gt;django-rest-framework&lt;/code&gt; ( whose first commit was all the way back in &lt;a href="https://github.com/vitormazzi/django-rest-framework/commit/650111dc8c0800e5b7d4c878c1d454657b68efca"&gt;Dec 30,2011&lt;/a&gt; ). Well I am glad that you asked this question. Let's talk â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;code&gt;django-ninja&lt;/code&gt; is a relatively new framework ( &lt;a href="https://github.com/vitalik/django-ninja/commit/1b79e8de644aef247e0456daa3b566db70fe1c07"&gt;first commit was in July 21, 2020&lt;/a&gt; ). So you might ask why would you use it instead of something like &lt;code&gt;django-rest-framework&lt;/code&gt; ( whose first commit was all the way back in &lt;a href="https://github.com/vitormazzi/django-rest-framework/commit/650111dc8c0800e5b7d4c878c1d454657b68efca"&gt;Dec 30,2011&lt;/a&gt; ). Well I am glad that you asked this question. Let's talk about it.&lt;/p&gt;
&lt;h1 id="django-rest-framework-is-slow"&gt;Django Rest framework is slow&lt;a class="headerlink" href="#django-rest-framework-is-slow" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;django-rest-framework&lt;/code&gt; is slow. Period. It's almost 2x-3x slower than &lt;code&gt;django-ninja&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;django-rest-framework&lt;/code&gt; does a whole lot of things under the hood. There are &lt;a href="https://hakibenita.com/django-rest-framework-slow"&gt;articles&lt;/a&gt; explaining how to improve things ( specially with serializers ) with &lt;code&gt;django-rest-framework&lt;/code&gt; but I am have not invested enough time to understand why &lt;code&gt;django-rest-framework&lt;/code&gt; is slow.&lt;/p&gt;
&lt;p&gt;To me ( an average developer developing his hobby project ) serialization should be fast. I shouldn't have to invest time into a project and realize that, "Oh shit. I fucked up while picking a good stack. Alright, buckle up, Sherlock! It's time to put on your detective hat, grab your magnifying glass, and embark on a whimsically peculiar investigation."&lt;/p&gt;
&lt;h1 id="django-rest-framework-lacks-proper-typing"&gt;Django Rest Framework lacks proper typing&lt;a class="headerlink" href="#django-rest-framework-lacks-proper-typing" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;While there's pacakges like &lt;a href="https://pypi.org/project/djangorestframework-stubs/"&gt;&lt;code&gt;djangorestframework-stubs&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;drf&lt;/code&gt; was born in a time when there was a major transition between Python 2 to 3. There was no concept of a strongly typed python ( let alone &lt;code&gt;mypy&lt;/code&gt; ).&lt;/p&gt;
&lt;p&gt;So the typing implementation for &lt;code&gt;django-rest-framework&lt;/code&gt; often feels hacky and glued onto. Not to mention that &lt;code&gt;djangorestframework-stubs&lt;/code&gt; is an unofficial packages.&lt;/p&gt;
&lt;p&gt;While the maintainers of &lt;code&gt;djangorestframework-stubs&lt;/code&gt; is undoubtly talented, their implementation is not fixing the dumpster fire that is &lt;code&gt;django-rest-framework&lt;/code&gt; and not all the projects are using typed python ( which they should to catch bugs before runtime ).&lt;/p&gt;
&lt;h1 id="django-rest-framework-lacks-proper-swagger-support"&gt;Django Rest Framework lacks proper Swagger Support&lt;a class="headerlink" href="#django-rest-framework-lacks-proper-swagger-support" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;When &lt;code&gt;django-rest-framework&lt;/code&gt; was being actively worked on, tomchristie had another project named &lt;a href="https://www.coreapi.org/"&gt;&lt;code&gt;coreapi&lt;/code&gt;&lt;/a&gt;. &lt;a href="https://www.django-rest-framework.org/coreapi/"&gt;&lt;code&gt;django-rest-framework&lt;/code&gt; used to have first class support for &lt;code&gt;coreapi&lt;/code&gt;&lt;/a&gt;. But @tomchristie's &lt;code&gt;coreapi&lt;/code&gt; project never gained traction and &lt;a href="https://github.com/encode/django-rest-framework/pull/7519"&gt;&lt;code&gt;coreapi&lt;/code&gt; was eventually deprecated&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You might ask why is this a big deal? Due to focusing effort on &lt;code&gt;coreapi&lt;/code&gt;, &lt;code&gt;django-rest-framework&lt;/code&gt; never got the same amount of love for &lt;code&gt;swagger&lt;/code&gt; ( the de-facto openapi Swagger-compliant API ). Instead they made their own api renderer ( which is very very hard to customize properly due to how complex the autogenaration features are )&lt;/p&gt;
&lt;p&gt;There are projects like &lt;a href="https://github.com/tfranzel/drf-spectacular"&gt;&lt;code&gt;drf-spectacular&lt;/code&gt;&lt;/a&gt; but it often requires extra effort on the developers part ( emphasizing my previous point about typing ), to achieve the functionality ( specially with &lt;code&gt;@extend_schema&lt;/code&gt; decorator ). This implementation often feels lackluster comapred to competition.&lt;/p&gt;
&lt;h1 id="django-rest-frameworks-magic"&gt;Django rest framework's magic&lt;a class="headerlink" href="#django-rest-frameworks-magic" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;django-rest-framework&lt;/code&gt; has a lot of ways to achieve similiar functionality. Why should this be the case. There should be one way and one right way to achieve things ( look at &lt;code&gt;perl&lt;/code&gt;. &lt;code&gt;perl&lt;/code&gt; thought it would be nice for everyone to have a different way to achieve same functionality. Fast forward 10 years, nobody wants to touch that unholy mess ). Look at this diagram below ( shout out to &lt;a href="https://testdriven.io/blog/drf-views-part-1/"&gt;testdriven.io blog&lt;/a&gt;. You guys did a phenomenal job explaining things. ).&lt;/p&gt;
&lt;p&gt;&lt;img alt="DRF diagram" lass="image-center" src="https://baseplate-admin.github.io/blog/images/Why I chose django-ninja instead of django-rest-framework to build coreproject/drf_views_overview.png"/&gt;
&lt;img alt="DRF diagram 2" lass="image-center" src="https://baseplate-admin.github.io/blog/images/Why I chose django-ninja instead of django-rest-framework to build coreproject/generic_views.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;sub&gt; Image credit : &lt;a href="https://testdriven.io/blog/drf-views-part-1/"&gt;testdriven.io&lt;/a&gt; &lt;/sub&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;I as a simple developer should not have to memorize when to use what and as a paid developer shouldn't have to worry about those who preceeded me did a good job architecting the web application.&lt;/p&gt;
&lt;p&gt;Then there are &lt;a href="https://www.django-rest-framework.org/api-guide/generic-views/#concrete-view-classes"&gt;concrete-view-classes&lt;/a&gt; ( I hate it ). There are countless classes ( &lt;a href="https://github.com/encode/django-rest-framework/blob/9cfa4bd7cca19df0bc8e456d906c3ab7ce285cf4/rest_framework/generics.py#L188-L295"&gt;which are just mixins&lt;/a&gt; ) added to &lt;a href="https://github.com/encode/django-rest-framework/blob/9cfa4bd7cca19df0bc8e456d906c3ab7ce285cf4/rest_framework/generics.py#L24"&gt;GenericAPIView&lt;/a&gt; class. I mean whats the point? If you want people to mix and match. Just tell them to add mixins. Why are you making asumptions and making 10's ( well actually 9 ) of classes. God this irritates me so much. Wrapping your head around all these is a pain.&lt;/p&gt;
&lt;h1 id="django-rest-frameworks-lack-of-maintaince"&gt;Django Rest Framework's lack of maintaince&lt;a class="headerlink" href="#django-rest-frameworks-lack-of-maintaince" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;All the above problems could have been overlooked if &lt;code&gt;django-rest-framework&lt;/code&gt; was maintained properly. At the time of writing developement has recently been resumed after a long long haitus. &lt;a href="https://github.com/encode/django-rest-framework/discussions/8110#discussioncomment-1120770"&gt;Tom Christie's comment about things make it look bitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I am shocked at this specific comment :&lt;/p&gt;
&lt;blockquote&gt;
 Otherwise we should be considering the project feature-complete.
&lt;/blockquote&gt;
&lt;p&gt;No way a project that is at the scale of &lt;code&gt;django-rest-framwork&lt;/code&gt; is feature complete.&lt;/p&gt;
&lt;p&gt;Why did I say this ?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;django-rest-framework&lt;/code&gt; has no way to implement nested routing. Sure this could be achieved using &lt;code&gt;drf-nested-router&lt;/code&gt;, but i have been disappointed at the project. Since a lot of people tend to use it but finds no good example repsitory ( or at least i didn't know how to find one ). &lt;a href="https://github.com/alanjds/drf-nested-routers/issues/285"&gt;I have even raised an issue requesting this functionality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;django-rest-framework&lt;/code&gt; had over 200 open issues and pull requests ( they silence old issues with stale bot instead of properly addressing the issues at hand )&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/encode/django-rest-framework/blob/9cfa4bd7cca19df0bc8e456d906c3ab7ce285cf4/rest_framework/static/rest_framework/js/bootstrap.min.js#L2"&gt;&lt;code&gt;django-rest-framework&lt;/code&gt;'s &lt;code&gt;bootstrap&lt;/code&gt; version is stuck at version 3&lt;/a&gt; &lt;a href="https://github.com/twbs/bootstrap/commits/v3.4.1"&gt;which was last updated at Feb 13,2019&lt;/a&gt; which was about about 2 years ago since &lt;a href="https://github.com/encode/django-rest-framework/discussions/8110#discussioncomment-1120770"&gt;&lt;code&gt;Tom Christie&lt;/code&gt;'s comment&lt;/a&gt;. A feature complete library shouldn't have old dependencies. &lt;a href="https://github.com/encode/django-rest-framework/pull/7411"&gt;There's ongoing effort to move to bootstrap 5&lt;/a&gt; but it's been stale for over 2 years. I have proposed &lt;a href="https://github.com/encode/django-rest-framework/pull/7411#issuecomment-1493374681"&gt;making custom css&lt;/a&gt; ( which should make it feature complete ) but i don't think it will ever be implemented.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thing like &lt;code&gt;django-rest-framework&lt;/code&gt; is the reason ( to me atleast ) is why django is not seeing significant market share. &lt;code&gt;django-rest-framework&lt;/code&gt; is a relic of old era. It's time to move on to the next big thing in &lt;code&gt;django&lt;/code&gt; ecosystem. That's &lt;code&gt;django-ninja&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="introducing-django-ninja"&gt;Introducing &lt;code&gt;django-ninja&lt;/code&gt;&lt;a class="headerlink" href="#introducing-django-ninja" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;django-ninja&lt;/code&gt;. Behold, a novel framework emerges as a shining beacon of salvation amidst the profound obscurity that envelops our current era. &lt;code&gt;django-ninja&lt;/code&gt; gives us one and only one way to do things. So we are guranteed that projects developed using &lt;code&gt;django-ninja&lt;/code&gt; follows a pattern.&lt;/p&gt;
&lt;p&gt;Due to how &lt;code&gt;django-ninja&lt;/code&gt; is developed, it emphasizes strongly on typed codebases. Which leads to good documentation along with good mypy error catching.&lt;/p&gt;
&lt;p&gt;But &lt;code&gt;django-ninja&lt;/code&gt; is not the silver bullet to every problem. It solves a set of problem but brings it's own set of problems.&lt;/p&gt;
&lt;h1 id="the-devil-is-in-the-details"&gt;The devil is in the details&lt;a class="headerlink" href="#the-devil-is-in-the-details" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;While &lt;code&gt;django-ninja&lt;/code&gt; is based on very good architecture, it suffers from the &lt;a href="https://news.ycombinator.com/item?id=29471609"&gt;fastapi problem&lt;/a&gt;. Which is there's one guy ( &lt;a href="https://github.com/vitalik/"&gt;@vitalik&lt;/a&gt; ) doing everything. This exacerbates the vast number of open issues and PR's.&lt;/li&gt;
&lt;li&gt;Then there's the lack of ecosystem around &lt;code&gt;django-ninja&lt;/code&gt;. &lt;a href="https://github.com/encode/django-rest-framework/network/dependents?dependent_type=PACKAGE"&gt;The sheer amount of packages made for &lt;code&gt;django-rest-framework&lt;/code&gt; is mind boggling&lt;/a&gt; &lt;a href="https://github.com/vitalik/django-ninja/network/dependents?dependent_type=PACKAGE"&gt;compared to measly 10-20 packages for &lt;code&gt;django-ninja&lt;/code&gt;&lt;/a&gt;. I am confident this landscape will change in the next 10-20 years.&lt;/li&gt;
&lt;li&gt;By design, &lt;code&gt;django-ninja&lt;/code&gt;'s name resolution is tied to import order ( I haven't come across any use case that is affected by this but &lt;a href="https://github.com/encode/django-rest-framework/discussions/8917#discussioncomment-5473287"&gt;a django maintainer is not a fan of this&lt;/a&gt; )&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Along with this, &lt;code&gt;django-ninja&lt;/code&gt; codes ( like &lt;code&gt;fastapi&lt;/code&gt; ) can be overly verbose. ( which can be a good or bad thing depending on perspective )&lt;/p&gt;
&lt;p&gt;Let's take an example of &lt;a href="https://github.com/baseplate-admin/CoreProject/blob/35919b9b27b984931e3e59e4eae76e62ce5d089a/backend/django_core/apps/api/views/anime/__init__.py#L32-L121"&gt;my code&lt;/a&gt; :&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;AnimeInfoGETSchema&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nd"&gt;@paginate&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_anime_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HttpRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;AnimeInfoFilters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;QuerySet&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;AnimeModel&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;HAS_POSTGRES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;Http404&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Looksups are not supported on any other databases except Postgres"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;query_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exclude_none&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;query_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# 2 Step get query&lt;/span&gt;
    &lt;span class="c1"&gt;# There wont be a performance hit if we do all().filter()&lt;/span&gt;
    &lt;span class="c1"&gt;# https://docs.djangoproject.com/en/4.0/topics/db/queries/#retrieving-specific-objects-with-filters&lt;/span&gt;
    &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AnimeModel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# We must pop this to filter other fields on the later stage&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;query_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;similiarity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Greatest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;TrigramSimilarity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="n"&gt;TrigramSimilarity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"name_japanese"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="n"&gt;TrigramSimilarity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"name_synonyms__name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;similiarity__gte&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-similiarity"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Same here but with ids&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"mal_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"kitsu_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"anilist_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;query_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;_query_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;","&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;_query_&lt;/span&gt; &lt;span class="o"&gt;|=&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())},&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;query_object&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;=&lt;/span&gt; &lt;span class="n"&gt;_query_&lt;/span&gt;

    &lt;span class="c1"&gt;# Staff lookups&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;staff&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;query_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"staffs"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;staff&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;","&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;_query_&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;staff__name__icontains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;staff__alternate_names__name__icontains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;staff__family_name__icontains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;staff__family_name__icontains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;query_object&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;=&lt;/span&gt; &lt;span class="n"&gt;_query_&lt;/span&gt;

    &lt;span class="c1"&gt;# Many to many lookups&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"genres"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"themes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"studios"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"producers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"characters"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;query_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;_query_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;","&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;_query_&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;=&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;__name__icontains"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()},&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;query_object&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;=&lt;/span&gt; &lt;span class="n"&gt;_query_&lt;/span&gt;

    &lt;span class="c1"&gt;# This can be (AND: )&lt;/span&gt;
    &lt;span class="c1"&gt;# This means it is empty&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;query_object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query_object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distinct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;Http404&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"No &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt; matches the given query with &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_meta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;query_object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub&gt; See how long ( and complicated ) can a simple ( well not actually simple but detailed ) lookup function be ?&lt;/sub&gt;&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;a class="headerlink" href="#conclusion" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;There's no good solution to building rest api's with &lt;code&gt;django&lt;/code&gt;. While &lt;code&gt;django-rest-framework&lt;/code&gt; gives us multiple ways to achieve this functionality, it suffers from "there's more than one way to achieve same thing" and &lt;code&gt;django-ninja&lt;/code&gt; suffers from "New kid on the block" problem.&lt;/p&gt;
&lt;p&gt;Solving these type of problem is the key to getting more marketshare for &lt;code&gt;django&lt;/code&gt;. Otherwise new frameworks like &lt;code&gt;fastapi&lt;/code&gt; ( which inspired &lt;a href="https://github.com/starlite-api/starlite"&gt;&lt;code&gt;starlite&lt;/code&gt;&lt;/a&gt; which became &lt;a href="https://github.com/litestar-org/litestar"&gt;&lt;code&gt;litestar&lt;/code&gt;&lt;/a&gt; | You can find the creator's reasoning in this &lt;a href="https://www.reddit.com/r/Python/comments/s0jgou/starlite_the_little_api_framework_that_can/"&gt;reddit post&lt;/a&gt; and this &lt;a href="https://itnext.io/introducing-starlite-3928adaa19ae"&gt;medium article&lt;/a&gt; ) will flood the pypi registry and we will have new frameworks poping in left and right ( much like how people that were fed up with &lt;code&gt;react&lt;/code&gt; wrote &lt;code&gt;preact&lt;/code&gt; and now another project &lt;a href="https://github.com/aidenybai/million"&gt;&lt;code&gt;million&lt;/code&gt;&lt;/a&gt; is there to solve the problem both &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;preact&lt;/code&gt; are solving ).&lt;/p&gt;
&lt;p&gt;While &lt;code&gt;django-ninja&lt;/code&gt; is not the silver bullet that solves every problem, it gives developers very strong base to build and extend upon. That's the main reason I chose &lt;code&gt;django-ninja&lt;/code&gt; in hopes that it will take over &lt;code&gt;django-rest-framework&lt;/code&gt; to become the de-facto way of building rest api's with &lt;code&gt;django&lt;/code&gt;&lt;/p&gt;</content><category term="Django-Ninja"></category><category term="django-ninja"></category><category term="django"></category><category term="coreproject"></category></entry></feed>